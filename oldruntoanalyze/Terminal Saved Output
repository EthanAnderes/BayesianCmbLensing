Last login: Sat Jun 28 10:35:19 on ttys000
Ethans-MacBook-Air:~ ethananderes$ cd
Ethans-MacBook-Air:~ ethananderes$ ls
Box Sync  Desktop   Documents Downloads Dropbox   Library   Movies    Music     Pictures  Public    Software
Ethans-MacBook-Air:~ ethananderes$ view .bash_profile
Ethans-MacBook-Air:~ ethananderes$ cd .julia/v0.3/IJulia/src
-bash: cd: .julia/v0.3/IJulia/src: No such file or directory
Ethans-MacBook-Air:~ ethananderes$ cd ~/.julia/v0.3/IJulia/src
-bash: cd: /Users/ethananderes/.julia/v0.3/IJulia/src: No such file or directory
Ethans-MacBook-Air:~ ethananderes$ cd ~/.julia/v0.3/IJulia/
-bash: cd: /Users/ethananderes/.julia/v0.3/IJulia/: No such file or directory
Ethans-MacBook-Air:~ ethananderes$ cd ~/.julia/v0.3/
Ethans-MacBook-Air:v0.3 ethananderes$ ls
ArrayViews        Color             GZip              IniFile           PyCall            SIUnits           Tk                Zlib
BinDeps           DataArrays        Homebrew          METADATA          PyPlot            SortingAlgorithms URIParser
Cairo             DataFrames        ImageView         PDMats            REQUIRE           StatsBase         Winston
Cartesian         Distributions     Images            ProfileView       Reexport          TexExtensions     ZMQ
Ethans-MacBook-Air:v0.3 ethananderes$ 
Ethans-MacBook-Air:v0.3 ethananderes$ ls
ArrayViews        Homebrew          ProfileView       TexExtensions
BinDeps           IJulia            PyCall            Tk
Cairo             ImageView         PyPlot            URIParser
Cartesian         Images            REPLCompletions   Winston
Color             IniFile           REQUIRE           ZMQ
DataArrays        JSON              Reexport          Zlib
DataFrames        METADATA          SIUnits
Distributions     Nettle            SortingAlgorithms
GZip              PDMats            StatsBase
Ethans-MacBook-Air:v0.3 ethananderes$ cd
Ethans-MacBook-Air:~ ethananderes$ ls
Box Sync  Documents Dropbox   Movies    Pictures  Software
Desktop   Downloads Library   Music     Public
Ethans-MacBook-Air:~ ethananderes$ cd Dropbox/
Ethans-MacBook-Air:Dropbox ethananderes$ ls
BayesLense             MleDensityWarp         Stat235_2014
CmbFitTest             NeedletQE              Talks
Icon?                  Public                 ToDo.md
MessagePassingKriging  Referee and AE reports dropbox.py
Ethans-MacBook-Air:Dropbox ethananderes$ cd BayesLense/
Ethans-MacBook-Air:BayesLense ethananderes$ ls
README.md       paper           simulations
oldruntoanalyze scripts         src
Ethans-MacBook-Air:BayesLense ethananderes$ cd ..
Ethans-MacBook-Air:Dropbox ethananderes$ ls
BayesLense             MleDensityWarp         Stat235_2014
CmbFitTest             NeedletQE              Talks
Icon?                  Public                 ToDo.md
MessagePassingKriging  Referee and AE reports dropbox.py
Ethans-MacBook-Air:Dropbox ethananderes$ cd MessagePassingKriging/
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ ls
README.md   paper       scripts     simulations src
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ subl -n scripts/
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "help()" to list help topics
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.3.0-prerelease+3828 (2014-06-21 20:08 UTC)
 _/ |\__'_|_|_|\__'_|  |  Commit 4e8b3d3* (6 days old master)
|__/                   |  x86_64-apple-darwin13.2.0

julia> quit()
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "help()" to list help topics
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.3.0-prerelease+3828 (2014-06-21 20:08 UTC)
 _/ |\__'_|_|_|\__'_|  |  Commit 4e8b3d3* (6 days old master)
|__/                   |  x86_64-apple-darwin13.2.0

julia> ls
ls (generic function with 1 method)

julia> paste()
INFO: Loading help data...
0.0

julia> sim_σ(sk, ν, ρ, σ, 50)
0.001

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
   1.52966e-284
  -1.07774e104 
   5.51334e-140
   4.78067e-299
   1.59283e-296
   8.12898e-299
   1.55671e-284
   2.80968e-309
  -1.0778e104  
  -1.0778e104  
  -1.0778e104  
   8.60572e-67 
   1.55671e-284
   2.80953e-309
  -1.07779e104 
   1.6645e-70  
   1.59283e-296
   4.83716e-299
   5.37292e149 
  -3.62785e-217
   3.8753e-255 
   1.52037e-284
   ⋮           
   3.8855e-318 
 NaN           
   3.5617e-318 
 NaN           
   4.53308e-318
 NaN           
   0.0         
 NaN           
   0.0         
 NaN           
   2.47033e-323
 NaN           
   0.0         
 NaN           
   4.85687e-318
 NaN           
   0.0         
 NaN           
   0.0         
 NaN           
   4.53315e-318

julia> for i = 1:ngrd
              post[i] = exp(logpost(ν, ρ, σgrd[i], sk, thin))
          end
ERROR: thin not defined
 in anonymous at no file:2

julia> think = 25
25

julia> for i = 1:ngrd
              post[i] = exp(logpost(ν, ρ, σgrd[i], sk, thin))
          end
ERROR: thin not defined
 in anonymous at no file:2

julia> thin = 25
25

julia> for i = 1:ngrd
              post[i] = exp(logpost(ν, ρ, σgrd[i], sk, thin))
          end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x113fcdc90>

julia> post
500-element Array{Float64,1}:
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 ⋮  
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0

julia> thin = 100
100

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
 NaN           
   0.0         
   0.0         
   6.95123e-310
 NaN           
   0.0         
   0.0         
   6.95123e-310
 NaN           
   0.0         
   0.0         
   6.95145e-310
 NaN           
   0.0         
   0.0         
   6.95123e-310
 NaN           
   0.0         
   0.0         
   6.95145e-310
 NaN           
   0.0         
   ⋮           
   6.95144e-310
 NaN           
   0.0         
   0.0         
   6.95314e-310
 NaN           
   6.95144e-310
   6.95144e-310
   6.95144e-310
 NaN           
   0.0         
   0.0         
   6.95314e-310
 NaN           
   6.95123e-310
 NaN           
   6.95123e-310
 NaN           
   0.0         
   0.0         
   6.95314e-310

julia> for i = 1:ngrd
               post[i] = exp(logpost(ν, ρ, σgrd[i], sk, thin))
           end

julia> post
500-element Array{Float64,1}:
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 ⋮  
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0

julia> for i = 1:ngrd
               post[i] = logpost(ν, ρ, σgrd[i], sk, thin)
           end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x1080be250>

julia> post
500-element Array{Float64,1}:
     -9.75153e7
 -58642.1      
 -15615.9      
  -7430.69     
  -4536.42     
  -3189.15     
  -2454.56     
  -2010.41     
  -1721.53     
  -1523.13     
  -1381.01     
  -1275.73     
  -1195.57     
  -1133.13     
  -1083.54     
  -1043.5      
  -1010.71     
   -983.52     
   -960.718    
   -941.411    
   -924.918    
   -910.718    
      ⋮        
   -773.433    
   -773.433    
   -773.434    
   -773.435    
   -773.436    
   -773.436    
   -773.437    
   -773.438    
   -773.439    
   -773.439    
   -773.44     
   -773.441    
   -773.442    
   -773.443    
   -773.443    
   -773.444    
   -773.445    
   -773.446    
   -773.446    
   -773.447    
   -773.448    

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x113fc1f90>

julia> plot(post[1:10])
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x110b65d90>

julia> semilog(abs(post))
ERROR: semilog not defined

julia> semilogy(abs(post))
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x110b7cf90>

julia> thin = 100
100

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
    0.0         
    0.0         
 1440.0         
   22.0         
    0.04        
    0.04        
    0.00444444  
    0.00444444  
 4096.0         
 4096.0         
    0.000244141 
    0.000244141 
    0.5         
    0.0         
    3.23791e-319
    0.0         
    6.95145e-310
    0.0         
    0.0         
    0.0         
    0.0         
    2.26244e-314
    ⋮           
    2.26251e-314
    2.26251e-314
    2.2625e-314 
    2.2625e-314 
    2.26251e-314
    2.2625e-314 
    2.26251e-314
    2.26251e-314
    2.26244e-314
    2.26244e-314
    2.2625e-314 
    2.25441e-314
    2.2625e-314 
    2.2625e-314 
    2.26251e-314
    2.2625e-314 
    2.26251e-314
    2.26214e-314
    2.26251e-314
    2.2625e-314 
    2.26251e-314

julia> for i = 1:ngrd
               post[i] = logpost(ν, ρ, σgrd[i], sk, thin)
           end

julia> plot(logpost)
ERROR: PyError (PyObject_Call) <type 'exceptions.TypeError'>
TypeError('float() argument must be a string or a number',)
  File "/Library/Python/2.7/site-packages/matplotlib-1.4.x-py2.7-macosx-10.8-intel.egg/matplotlib/pyplot.py", line 2987, in plot
    ret = ax.plot(*args, **kwargs)
  File "/Library/Python/2.7/site-packages/matplotlib-1.4.x-py2.7-macosx-10.8-intel.egg/matplotlib/axes.py", line 4138, in plot
    self.add_line(line)
  File "/Library/Python/2.7/site-packages/matplotlib-1.4.x-py2.7-macosx-10.8-intel.egg/matplotlib/axes.py", line 1497, in add_line
    self._update_line_limits(line)
  File "/Library/Python/2.7/site-packages/matplotlib-1.4.x-py2.7-macosx-10.8-intel.egg/matplotlib/axes.py", line 1508, in _update_line_limits
    path = line.get_path()
  File "/Library/Python/2.7/site-packages/matplotlib-1.4.x-py2.7-macosx-10.8-intel.egg/matplotlib/lines.py", line 743, in get_path
    self.recache()
  File "/Library/Python/2.7/site-packages/matplotlib-1.4.x-py2.7-macosx-10.8-intel.egg/matplotlib/lines.py", line 429, in recache
    y = np.asarray(yconv, np.float_)
  File "/Library/Python/2.7/site-packages/numpy-1.8.0.dev_074a40c_20130617-py2.7-macosx-10.8-intel.egg/numpy/core/numeric.py", line 341, in asarray
    return array(a, dtype, copy=False, order=order)

 in pyerr_check at /Users/ethananderes/.julia/v0.3/PyCall/src/exception.jl:58
 in pycall at /Users/ethananderes/.julia/v0.3/PyCall/src/PyCall.jl:85
 in plot at /Users/ethananderes/.julia/v0.3/PyPlot/src/PyPlot.jl:250

julia> logpost
logpost (generic function with 1 method)

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x1142693d0>

julia> logpost
logpost (generic function with 1 method)

julia> post
500-element Array{Float64,1}:
     -9.75153e7
 -58642.1      
 -15615.9      
  -7430.69     
  -4536.42     
  -3189.15     
  -2454.56     
  -2010.41     
  -1721.53     
  -1523.13     
  -1381.01     
  -1275.73     
  -1195.57     
  -1133.13     
  -1083.54     
  -1043.5      
  -1010.71     
   -983.52     
   -960.718    
   -941.411    
   -924.918    
   -910.718    
      ⋮        
   -773.433    
   -773.433    
   -773.434    
   -773.435    
   -773.436    
   -773.436    
   -773.437    
   -773.438    
   -773.439    
   -773.439    
   -773.44     
   -773.441    
   -773.442    
   -773.443    
   -773.443    
   -773.444    
   -773.445    
   -773.446    
   -773.446    
   -773.447    
   -773.448    

julia> thin = 200
200

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
 -262143.0         
 -262143.0         
  262143.0         
  262143.0         
       0.64        
       0.64        
       0.0711111   
       0.0711111   
    4096.0         
    4096.0         
       0.000244141 
       0.000244141 
       0.5         
       0.0         
       0.0         
       0.0         
       6.95145e-310
       0.0         
       0.0         
       0.0         
       0.0         
       0.0078125   
       ⋮           
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         
       0.0         

julia> for i = 1:ngrd
               post[i] = exp(logpost(ν, ρ, σgrd[i], sk, thin))
           end

julia> post
500-element Array{Float64,1}:
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 9.88131e-323
 1.45927e-316
 ⋮           
 5.42054e-257
 5.41652e-257
 5.41249e-257
 5.40843e-257
 5.40437e-257
 5.40028e-257
 5.39618e-257
 5.39207e-257
 5.38794e-257
 5.3838e-257 
 5.37964e-257
 5.37547e-257
 5.37128e-257
 5.36708e-257
 5.36287e-257
 5.35865e-257
 5.35441e-257
 5.35016e-257
 5.3459e-257 
 5.34162e-257
 5.33734e-257

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
  2.18633e-314
  0.0         
  2.18633e-314
  0.0         
  2.18633e-314
  0.0         
  2.18633e-314
  0.0         
  2.18633e-314
  0.0         
  2.18633e-314
  0.0         
  0.0         
  0.0         
  2.31331e-312
  6.95145e-310
  6.95145e-310
  6.95145e-310
  2.47033e-323
  6.95145e-310
  6.95145e-310
  6.95145e-310
  ⋮           
  0.0         
  0.0         
  3.64119e-5  
  1.80735e-314
  0.0         
  6.95145e-310
  6.95145e-310
  2.1864e-314 
  6.95145e-310
  6.95145e-310
  4.24399e-314
  0.0         
  2.73314e-311
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
 -2.26418e294 
  1.84053e-314
  0.0         

julia> for i = 1:ngrd
               post[i] = logpost(ν, ρ, σgrd[i], sk, thin)
           end

julia> post
500-element Array{Float64,1}:
     -9.75148e7
 -58455.1      
 -15430.9      
  -7246.26     
  -4352.28     
  -3005.19     
  -2270.7      
  -1826.63     
  -1537.81     
  -1339.46     
  -1197.38     
  -1092.12     
  -1011.99     
   -949.564    
   -899.991    
   -859.968    
   -827.19     
   -800.008    
   -777.216    
   -757.917    
   -741.432    
   -727.239    
      ⋮        
   -590.074    
   -590.075    
   -590.076    
   -590.076    
   -590.077    
   -590.078    
   -590.079    
   -590.079    
   -590.08     
   -590.081    
   -590.082    
   -590.083    
   -590.083    
   -590.084    
   -590.085    
   -590.086    
   -590.086    
   -590.087    
   -590.088    
   -590.089    
   -590.09     

julia> plot(post[4:end])
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11421f350>

julia> findmax(post)
(-590.0291426649526,379)

julia> length(post)
500

julia> findmax(post) |> σgrd
ERROR: no method |>((Float64,Int64), Array{Float64,1})

julia> findmax(post)[2] |> σgrd
ERROR: no method |>(Int64, Array{Float64,1})

julia> findmax(post) |> x-> int(x[2]) |> σgrd
ERROR: no method |>(Int64, Array{Float64,1})
 in anonymous at none:1
 in |> at operators.jl:178

julia> findmax(post) |> x-> int(x[2]) 
379

julia> findmax(post)[2]
379

julia> findmax(post)[2] |> x->σgrid(x)
ERROR: σgrid not defined
 in anonymous at none:1
 in |> at operators.jl:178

julia> findmax(post)[2] |> x->σgrid[x]
ERROR: σgrid not defined
 in anonymous at none:1
 in |> at operators.jl:178

julia> findmax(post)[2] |> x-> σgrid[x]
ERROR: σgrid not defined
 in anonymous at none:1
 in |> at operators.jl:178

julia> σgrd[findmax(post)[2]]
15.150543086172345

julia> σ
1.1

julia> thin = 1000
1000

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
  0.0         
  0.0         
  6.95144e-310
  6.95144e-310
  6.95144e-310
  6.95144e-310
  6.95144e-310
  6.95144e-310
  2.18642e-314
  6.95144e-310
  6.95144e-310
  7.29114e-304
  6.95144e-310
  0.0         
  2.27054e-312
  6.95144e-310
  6.95144e-310
  6.95144e-310
  2.122e-314  
  6.95144e-310
  4.94066e-324
  0.0         
  ⋮           
  0.0         
  2.33428e-312
  6.95144e-310
  6.95144e-310
  6.95144e-310
 -3.18299e-313
  6.95144e-310
  6.95145e-310
  0.0         
  6.95144e-310
  6.95144e-310
  2.18637e-314
  6.95144e-310
  6.95144e-310
  2.122e-314  
  0.0         
  2.82014e-311
  2.29184e-312
  6.95144e-310
  6.95144e-310
  6.95144e-310

julia> for i = 1:ngrd
              post[i] = exp(logpost(ν, ρ, σgrd[i], sk, thin))
          end

julia> post
500-element Array{Float64,1}:
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 1.79135e-302
 8.94249e-257
 5.55612e-222
 7.02909e-195
 2.3395e-173 
 5.55723e-156
 9.44123e-142
 5.96656e-130
 4.67978e-120
 1.11716e-111
 1.60057e-104
 2.31864e-98 
 ⋮           
 7.67896e-39 
 7.6732e-39  
 7.66742e-39 
 7.66161e-39 
 7.65579e-39 
 7.64994e-39 
 7.64407e-39 
 7.63818e-39 
 7.63226e-39 
 7.62633e-39 
 7.62038e-39 
 7.61441e-39 
 7.60842e-39 
 7.60241e-39 
 7.59638e-39 
 7.59034e-39 
 7.58428e-39 
 7.5782e-39  
 7.5721e-39  
 7.56598e-39 
 7.55986e-39 

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x110b988d0>

julia> post
500-element Array{Float64,1}:
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 1.79135e-302
 8.94249e-257
 5.55612e-222
 7.02909e-195
 2.3395e-173 
 5.55723e-156
 9.44123e-142
 5.96656e-130
 4.67978e-120
 1.11716e-111
 1.60057e-104
 2.31864e-98 
 ⋮           
 7.67896e-39 
 7.6732e-39  
 7.66742e-39 
 7.66161e-39 
 7.65579e-39 
 7.64994e-39 
 7.64407e-39 
 7.63818e-39 
 7.63226e-39 
 7.62633e-39 
 7.62038e-39 
 7.61441e-39 
 7.60842e-39 
 7.60241e-39 
 7.59638e-39 
 7.59034e-39 
 7.58428e-39 
 7.5782e-39  
 7.5721e-39  
 7.56598e-39 
 7.55986e-39 

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11422d950>

julia> plot(σgrd, post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x110b7c1d0>

julia> cSS = matern(grd.k, ν, ρ, σ)
1024-element Array{Float64,1}:
 1.21      
 1.00067   
 0.623623  
 0.34696   
 0.191997  
 0.110357  
 0.0666187 
 0.0421842 
 0.0278803 
 0.0191254 
 0.0135475 
 0.00986529
 0.00735783
 0.00560309
 0.00434528
 0.00342436
 0.00273728
 0.00221599
 0.00181449
 0.00150102
 0.00125327
 0.00105526
 ⋮         
 0.00105526
 0.00125327
 0.00150102
 0.00181449
 0.00221599
 0.00273728
 0.00342436
 0.00434528
 0.00560309
 0.00735783
 0.00986529
 0.0135475 
 0.0191254 
 0.0278803 
 0.0421842 
 0.0666187 
 0.110357  
 0.191997  
 0.34696   
 0.623623  
 1.00067   

julia> vark = cSS / grd.deltk
1024-element Array{Float64,1}:
 1.14726   
 0.948785  
 0.591287  
 0.328969  
 0.182042  
 0.104635  
 0.0631644 
 0.0399969 
 0.0264346 
 0.0181338 
 0.012845  
 0.00935376
 0.00697632
 0.00531256
 0.00411997
 0.0032468 
 0.00259535
 0.00210109
 0.0017204 
 0.00142319
 0.00118829
 0.00100055
 ⋮         
 0.00100055
 0.00118829
 0.00142319
 0.0017204 
 0.00210109
 0.00259535
 0.0032468 
 0.00411997
 0.00531256
 0.00697632
 0.00935376
 0.012845  
 0.0181338 
 0.0264346 
 0.0399969 
 0.0631644 
 0.104635  
 0.182042  
 0.328969  
 0.591287  
 0.948785  

julia> plot( abs2(sk) ./ vark )
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x114277c90>

julia> figure(2)
Figure(PyObject <matplotlib.figure.Figure object at 0x11426ab50>)

julia> plot(abs2(randn(500)))
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x1080ca8d0>

julia> grd.deltk
1.0546875

julia> range
range (generic function with 7 methods)

help?> range
Base.range(start[, step], length)

   Construct a range by length, given a starting value and optional
   step (defaults to 1).

help?> linspace
Base.linspace(start, stop, n)

   Construct a vector of "n" linearly-spaced elements from "start"
   to "stop".

julia> linrange
ERROR: linrange not defined

julia> quit()
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "help()" to list help topics
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.3.0-prerelease+3828 (2014-06-21 20:08 UTC)
 _/ |\__'_|_|_|\__'_|  |  Commit 4e8b3d3* (6 days old master)
|__/                   |  x86_64-apple-darwin13.2.0

julia> paste()
INFO: Loading help data...
ERROR: type Int64 has no field k
 in sim_σ at /Users/ethananderes/Dropbox/MessagePassingKriging/src/funcs1d.jl:141
 in include_string at loading.jl:100
 in paste at /Users/ethananderes/.juliarc.jl:2
while loading string, in expression starting on line 41

julia> # ---- script parameters
       const pixel_side_length = 20.0
20.0

julia> const n = 2.0^10
1024.0

julia> const nm = int(n * 0.25) # number of randomly masked points
256

julia> const ν, ρ, σ = 1.8, 0.3, 1.1
(1.8,0.3,1.1)

julia> ]]
       # ---- load libraries
       require("src/funcs1d.jl")
       using PyPlot
ERROR: syntax: unexpected "]"

julia> 

julia> # ---- load libraries
       require("src/funcs1d.jl")

julia> using PyPlot

julia> 

julia> 

julia> 

julia> 

julia> # ---- make grid and Matérn model
       const grd = Grid_xandk(pixel_side_length, n)
Warning: redefining constant grd
Grid_xandk(20.0,1024.0,0.005817764173314432,1.0546875,5.957390513473978,540.0,
[0.0,0.00581776,0.0116355,0.0174533,0.0232711,0.0290888,0.0349066,0.0407243,0.0465421,0.0523599  …  5.89921,5.90503,5.91085,5.91667,5.92248,5.9283,5.93412,5.93994,5.94575,5.95157],[0.0,1.05469,2.10938,3.16406,4.21875,5.27344,6.32813,7.38281,8.4375,9.49219  …  -10.5469,-9.49219,-8.4375,-7.38281,-6.32813,-5.27344,-4.21875,-3.16406,-2.10938,-1.05469],[0.0,1.05469,2.10938,3.16406,4.21875,5.27344,6.32813,7.38281,8.4375,9.49219  …  10.5469,9.49219,8.4375,7.38281,6.32813,5.27344,4.21875,3.16406,2.10938,1.05469])

julia> 

julia> 

julia> 

julia> # --- make noise model
       function noise_model()
       	tmpdo = maximum(grd.x) * 0.05
       	tmpup = maximum(grd.x) * 0.9
       	ssbool = shuffle([trues(nm), falses(int(n-nm))])
       	noise_boolx = (grd.x .<= tmpdo) | (tmpup .<= grd.x) | ssbool
       	noise_varx = abs2(2.0 * (sin(grd.x) .+ 1.2) )
       	noise_varx[noise_boolx] = Inf
       	noise_varx, noise_boolx
       end
noise_model (generic function with 1 method)

julia> const noise_varx, noise_boolx = noise_model()
Warning: redefining constant noise_varx
Warning: redefining constant noise_boolx
([Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf  …  Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf],Bool[true,true,true,true,true,true,true,true,true,true  …  true,true,true,true,true,true,true,true,true,true])

julia> 

julia> 

julia> 

julia> # ----- signal and data
       sk, sx = simk_grf(matern(grd.k, ν, ρ, σ), grd)
(Complex{Float64}[-4.00018+0.0im,-6.61805+13.3267im,10.303+1.47567im,-2.27138-7.40658im,5.71237-6.99317im,-4.59702-1.86299im,-0.0571117+0.992064im,0.808963-2.63561im,-1.78383-2.4738im,-1.39574+0.738093im  …  -0.356131-1.91592im,-1.39574-0.738093im,-1.78383+2.4738im,0.808963+2.63561im,-0.0571117-0.992064im,-4.59702+1.86299im,5.71237+6.99317im,-2.27138+7.40658im,10.303-1.47567im,-6.61805-13.3267im],[-3.21979,-3.26447,-3.31927,-3.22585,-3.13205,-3.06163,-2.84696,-2.46852,-2.0918,-1.72978  …  -4.78748,-4.40819,-4.15863,-3.86108,-3.76937,-3.86982,-3.93977,-3.82427,-3.76291,-3.53456])

julia> nx = √(noise_varx) .* randn(size(grd.x))
1024-element Array{Float64,1}:

  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
 -Inf
    ⋮
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
  Inf

julia> dx = sx + nx
1024-element Array{Float64,1}:
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
 -Inf
    ⋮
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
  Inf

julia> dx[noise_boolx] = 0.0
0.0

julia> 

julia> sim_σ(sk, ν, ρ, σ, 50)
ERROR: type Int64 has no field k
 in sim_σ at /Users/ethananderes/Dropbox/MessagePassingKriging/src/funcs1d.jl:141

julia> quit()
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ juila
-bash: juila: command not found
Ethans-MacBook-Air:MessagePassingKriging ethananderes$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "help()" to list help topics
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.3.0-prerelease+3828 (2014-06-21 20:08 UTC)
 _/ |\__'_|_|_|\__'_|  |  Commit 4e8b3d3* (6 days old master)
|__/                   |  x86_64-apple-darwin13.2.0

julia> # ---- script parameters
       const pixel_side_length = 20.0
20.0

julia> const n = 2.0^10
1024.0

julia> const nm = int(n * 0.25) # number of randomly masked points
256

julia> const ν, ρ, σ = 1.8, 0.3, 1.1
(1.8,0.3,1.1)

julia> # ---- load libraries
       require("src/funcs1d.jl")

julia> using PyPlot
INFO: Loading help data...

julia> # ---- make grid and Matérn model
       const grd = Grid_xandk(pixel_side_length, n)
Grid_xandk(20.0,1024.0,0.005817764173314432,1.0546875,5.957390513473978,540.0,[0.0,0.00581776,0.0116355,0.0174533,0.0232711,0.0290888,0.0349066,0.0407243,0.0465421,0.0523599  …  5.89921,5.90503,5.91085,5.91667,5.92248,5.9283,5.93412,5.93994,5.94575,5.95157],[0.0,1.05469,2.10938,3.16406,4.21875,5.27344,6.32813,7.38281,8.4375,9.49219  …  -10.5469,-9.49219,-8.4375,-7.38281,-6.32813,-5.27344,-4.21875,-3.16406,-2.10938,-1.05469],[0.0,1.05469,2.10938,3.16406,4.21875,5.27344,6.32813,7.38281,8.4375,9.49219  …  10.5469,9.49219,8.4375,7.38281,6.32813,5.27344,4.21875,3.16406,2.10938,1.05469])

julia> # --- make noise model
       function noise_model()
       	tmpdo = maximum(grd.x) * 0.05
       	tmpup = maximum(grd.x) * 0.9
       	ssbool = shuffle([trues(nm), falses(int(n-nm))])
       	noise_boolx = (grd.x .<= tmpdo) | (tmpup .<= grd.x) | ssbool
       	noise_varx = abs2(2.0 * (sin(grd.x) .+ 1.2) )
       	noise_varx[noise_boolx] = Inf
       	noise_varx, noise_boolx
       end
noise_model (generic function with 1 method)

julia> const noise_varx, noise_boolx = noise_model()
([Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf  …  Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf],Bool[true,true,true,true,true,true,true,true,true,true  …  true,true,true,true,true,true,true,true,true,true])

julia> # ----- signal and data
       sk, sx = simk_grf(matern(grd.k, ν, ρ, σ), grd)
(Complex{Float64}[-20.8892+0.0im,0.122983-3.93637im,-10.66-23.3897im,5.4573-2.48974im,0.330844+4.55773im,6.05544+1.07321im,-1.07791-0.433485im,-2.17223+3.94914im,-2.00006+0.469599im,-1.15039-1.86425im  …  1.5022+0.811822im,-1.15039+1.86425im,-2.00006-0.469599im,-2.17223-3.94914im,-1.07791+0.433485im,6.05544-1.07321im,0.330844-4.55773im,5.4573+2.48974im,-10.66+23.3897im,0.122983+3.93637im],[-10.9132,-10.8438,-10.7415,-10.6036,-10.4866,-10.4829,-10.4228,-10.2819,-10.0407,-9.89089  …  -11.5796,-11.444,-11.2492,-10.9259,-10.7612,-10.6421,-10.5323,-10.6524,-10.8985,-10.9404])

julia> nx = √(noise_varx) .* randn(size(grd.x))
1024-element Array{Float64,1}:
 -Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
  Inf
    ⋮
 -Inf
  Inf
  Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf

julia> dx = sx + nx
1024-element Array{Float64,1}:
 -Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
  Inf
    ⋮
 -Inf
  Inf
  Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf

julia> dx[noise_boolx] = 0.0
0.0

julia> sim_σ(sk, ν, ρ, σ, 50)
ERROR: type Int64 has no field k
 in sim_σ at /Users/ethananderes/Dropbox/MessagePassingKriging/src/funcs1d.jl:141
 in sim_σ at /Users/ethananderes/Dropbox/MessagePassingKriging/src/funcs1d.jl:137

julia> sim_σ(sk, ν, ρ, σ, grd, 50)
0.001

julia> sim_σ(sk, ν, ρ, σ, grd, 50)
0.001

julia> plot( abs2(sk[1:thin:end]) ./ vark)
ERROR: thin not defined

julia> 

julia> cSS = matern(grd.k, ν, ρ, σ)
1024-element Array{Float64,1}:
 1.21      
 1.00067   
 0.623623  
 0.34696   
 0.191997  
 0.110357  
 0.0666187 
 0.0421842 
 0.0278803 
 0.0191254 
 0.0135475 
 0.00986529
 0.00735783
 0.00560309
 0.00434528
 0.00342436
 0.00273728
 0.00221599
 0.00181449
 0.00150102
 0.00125327
 0.00105526
 ⋮         
 0.00105526
 0.00125327
 0.00150102
 0.00181449
 0.00221599
 0.00273728
 0.00342436
 0.00434528
 0.00560309
 0.00735783
 0.00986529
 0.0135475 
 0.0191254 
 0.0278803 
 0.0421842 
 0.0666187 
 0.110357  
 0.191997  
 0.34696   
 0.623623  
 1.00067   

julia> 

julia> vark = cSS / grd.deltk
1024-element Array{Float64,1}:
 1.14726   
 0.948785  
 0.591287  
 0.328969  
 0.182042  
 0.104635  
 0.0631644 
 0.0399969 
 0.0264346 
 0.0181338 
 0.012845  
 0.00935376
 0.00697632
 0.00531256
 0.00411997
 0.0032468 
 0.00259535
 0.00210109
 0.0017204 
 0.00142319
 0.00118829
 0.00100055
 ⋮         
 0.00100055
 0.00118829
 0.00142319
 0.0017204 
 0.00210109
 0.00259535
 0.0032468 
 0.00411997
 0.00531256
 0.00697632
 0.00935376
 0.012845  
 0.0181338 
 0.0264346 
 0.0399969 
 0.0631644 
 0.104635  
 0.182042  
 0.328969  
 0.591287  
 0.948785  

julia> grd.deltk
1.0546875

julia> sk
1024-element Array{Complex{Float64},1}:
   -20.8892+0.0im      
   0.122983-3.93637im  
     -10.66-23.3897im  
     5.4573-2.48974im  
   0.330844+4.55773im  
    6.05544+1.07321im  
   -1.07791-0.433485im 
   -2.17223+3.94914im  
   -2.00006+0.469599im 
   -1.15039-1.86425im  
     1.5022-0.811822im 
   0.393082-0.590173im 
   0.862937+0.0266596im
  -0.363931-0.331016im 
   0.320567+0.514061im 
   0.257631+0.767124im 
  -0.272507-0.143007im 
   0.480858+0.247279im 
   0.627657+0.221217im 
   0.278442+0.312554im 
  -0.705471+0.113986im 
 -0.0696363-0.107567im 
           ⋮           
 -0.0696363+0.107567im 
  -0.705471-0.113986im 
   0.278442-0.312554im 
   0.627657-0.221217im 
   0.480858-0.247279im 
  -0.272507+0.143007im 
   0.257631-0.767124im 
   0.320567-0.514061im 
  -0.363931+0.331016im 
   0.862937-0.0266596im
   0.393082+0.590173im 
     1.5022+0.811822im 
   -1.15039+1.86425im  
   -2.00006-0.469599im 
   -2.17223-3.94914im  
   -1.07791+0.433485im 
    6.05544-1.07321im  
   0.330844-4.55773im  
     5.4573+2.48974im  
     -10.66+23.3897im  
   0.122983+3.93637im  

julia> abs2(sk)
1024-element Array{Float64,1}:
 436.361    
  15.5102   
 660.715    
  35.981    
  20.8824   
  37.8201   
   1.3498   
  20.3143   
   4.22078  
   4.7988   
   2.91565  
   0.502817 
   0.745371 
   0.242017 
   0.367022 
   0.654853 
   0.0947109
   0.292371 
   0.44289  
   0.17522  
   0.510682 
   0.0164199
   ⋮        
   0.0164199
   0.510682 
   0.17522  
   0.44289  
   0.292371 
   0.0947109
   0.654853 
   0.367022 
   0.242017 
   0.745371 
   0.502817 
   2.91565  
   4.7988   
   4.22078  
  20.3143   
   1.3498   
  37.8201   
  20.8824   
  35.981    
 660.715    
  15.5102   

julia> cZZ
ERROR: cZZ not defined

julia> cZZ = matern(grd.k, ν, ρ, σ)
1024-element Array{Float64,1}:
 1.21      
 1.00067   
 0.623623  
 0.34696   
 0.191997  
 0.110357  
 0.0666187 
 0.0421842 
 0.0278803 
 0.0191254 
 0.0135475 
 0.00986529
 0.00735783
 0.00560309
 0.00434528
 0.00342436
 0.00273728
 0.00221599
 0.00181449
 0.00150102
 0.00125327
 0.00105526
 ⋮         
 0.00105526
 0.00125327
 0.00150102
 0.00181449
 0.00221599
 0.00273728
 0.00342436
 0.00434528
 0.00560309
 0.00735783
 0.00986529
 0.0135475 
 0.0191254 
 0.0278803 
 0.0421842 
 0.0666187 
 0.110357  
 0.191997  
 0.34696   
 0.623623  
 1.00067   

julia> √(cZZ)
1024-element Array{Float64,1}:
 1.1      
 1.00034  
 0.789698 
 0.589033 
 0.438175 
 0.332201 
 0.258106 
 0.205388 
 0.166974 
 0.138295 
 0.116394 
 0.0993242
 0.0857778
 0.0748538
 0.0659188
 0.058518 
 0.052319 
 0.0470743
 0.0425968
 0.038743 
 0.0354015
 0.0324848
 ⋮        
 0.0324848
 0.0354015
 0.038743 
 0.0425968
 0.0470743
 0.052319 
 0.058518 
 0.0659188
 0.0748538
 0.0857778
 0.0993242
 0.116394 
 0.138295 
 0.166974 
 0.205388 
 0.258106 
 0.332201 
 0.438175 
 0.589033 
 0.789698 
 1.00034  

julia> 

julia> 

julia> √(grd.deltk)
1.0269797953221864

julia> Zk = √(cZZ) .* simk_unit_var(grd) ./ √(grd.deltk)
1024-element Array{Complex{Float64},1}:
   -26.939+0.0im      
  -2.56393+10.0671im  
   6.77542+6.02005im  
  -4.11695+7.02454im  
  -9.45849+7.34162im  
   2.36909-1.99474im  
   3.58272+0.16253im  
  -1.75824+0.383461im 
 -0.517595+0.726766im 
   1.72543+0.47495im  
  -2.15015-0.30178im  
 -0.198274-1.85358im  
   1.31487+0.908367im 
   1.05718+0.698042im 
  0.476385+0.319211im 
   0.06617-0.074311im 
 0.0491378-0.413779im 
 -0.150617+0.381914im 
 0.0385617+0.0695903im
  0.151954+0.230974im 
 -0.105716+0.457819im 
 -0.217541-0.190303im 
          ⋮           
 -0.217541+0.190303im 
 -0.105716-0.457819im 
  0.151954-0.230974im 
 0.0385617-0.0695903im
 -0.150617-0.381914im 
 0.0491378+0.413779im 
   0.06617+0.074311im 
  0.476385-0.319211im 
   1.05718-0.698042im 
   1.31487-0.908367im 
 -0.198274+1.85358im  
  -2.15015+0.30178im  
   1.72543-0.47495im  
 -0.517595-0.726766im 
  -1.75824-0.383461im 
   3.58272-0.16253im  
   2.36909+1.99474im  
  -9.45849-7.34162im  
  -4.11695-7.02454im  
   6.77542-6.02005im  
  -2.56393-10.0671im  

julia>  simk_unit_var(grd) |> abs2 
1024-element Array{Float64,1}:
  65.868  
 103.532  
 166.11   
  72.3789 
  88.5012 
 252.987  
 415.284  
  85.7873 
 406.199  
 125.641  
 153.09   
  24.1471 
 219.15   
 534.731  
  39.5451 
 239.355  
  73.3412 
  19.5503 
 249.334  
 221.265  
 315.384  
   5.87868
   ⋮      
   5.87868
 315.384  
 221.265  
 249.334  
  19.5503 
  73.3412 
 239.355  
  39.5451 
 534.731  
 219.15   
  24.1471 
 153.09   
 125.641  
 406.199  
  85.7873 
 415.284  
 252.987  
  88.5012 
  72.3789 
 166.11   
 103.532  

julia> grd.deltx
0.005817764173314432

julia> grd.deltk
1.0546875

julia> # -------- simulation functions
       spectralVarForNoise(var_at_each_pixel, grd::Grid_xandk, d)  = var_at_each_pixel * (grd.deltx^d)
spectralVarForNoise (generic function with 1 method)

julia> simk_unit_var(grd::Grid_xandk) = √(grd.deltk/grd.deltx) * ft(randn(size(grd.x)), grd) # re and im grdts have var 1/2
simk_unit_var (generic function with 1 method)

julia> simk_unit_spec(grd) =  simk_unit_var(grd::Grid_xandk) ./ √(grd.deltk)
simk_unit_spec (generic function with 1 method)

julia> function simk_grf(cZZ, grd) 
           Zk = √(cZZ) .* simk_unit_var(grd) ./ √(grd.deltk)
           Zx = iftr(Zk, grd)
           Zk, Zx
       end
simk_grf (generic function with 1 method)

julia> 

julia> 

julia> # ----- signal and data
       sk, sx = simk_grf(matern(grd.k, ν, ρ, σ), grd)
(Complex{Float64}[0.801384+0.0im,0.492638+0.573554im,0.763402+0.262358im,-0.508415-0.544188im,0.227335-0.805574im,0.0801245-0.551279im,-0.0569648-0.431759im,-0.0300808+0.116891im,-0.137273+0.0458901im,0.251574-0.100009im  …  0.0916615-0.183332im,0.251574+0.100009im,-0.137273-0.0458901im,-0.0300808-0.116891im,-0.0569648+0.431759im,0.0801245+0.551279im,0.227335+0.805574im,-0.508415+0.544188im,0.763402-0.262358im,0.492638-0.573554im],[1.37629,1.41618,1.46055,1.50687,1.54398,1.58143,1.6181,1.63826,1.66159,1.69038  …  0.911838,0.960766,0.997645,1.04428,1.09366,1.13574,1.16902,1.21721,1.27534,1.32791])

julia> nx = √(noise_varx) .* randn(size(grd.x))
1024-element Array{Float64,1}:
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
    ⋮
  Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
  Inf
  Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf

julia> dx = sx + nx
1024-element Array{Float64,1}:
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
 -Inf
  Inf
  Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
 -Inf
  Inf
  Inf
    ⋮
  Inf
  Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
  Inf
  Inf
  Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf
 -Inf
 -Inf
  Inf
 -Inf

julia> dx[noise_boolx] = 0.0
0.0

julia> sim_σ(sk, ν, ρ, σ, grd, 50)
19.31867134268537

julia> 

julia> sim_σ(sk, ν, ρ, σ, grd, 10)
4.088971943887776

julia> sim_σ(sk, ν, ρ, σ, grd, 5)
0.0811563126252505

julia> sim_σ(sk, ν, ρ, σ, grd, 3)
0.04107815631262525

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
5.932567134268537

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
1.4438136272545092

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
10.822102204408816

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
16.71359118236473

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
3.4076432865731467

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
2.405689378757515

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
4.249284569138276

julia> thin = 10
10

julia> sim_σ(sk, ν, ρ, σ, grd, 30)
7.896396793587175

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
   2.22209e-314
   0.0         
   2.22209e-314
   0.0         
   2.22209e-314
   0.0         
   2.22209e-314
   0.0         
   2.22209e-314
   0.0         
   2.22209e-314
   0.0         
   2.22209e-314
   0.0         
 525.234       
 524.18        
 523.125       
 522.07        
 521.016       
 519.961       
 518.906       
 517.852       
   ⋮           
  34.8047      
  33.75        
  32.6953      
  31.6406      
  30.5859      
  29.5313      
  28.4766      
  27.4219      
  26.3672      
  25.3125      
  24.2578      
  23.2031      
  22.1484      
  21.0938      
  20.0391      
  18.9844      
  17.9297      
  16.875       
  15.8203      
  14.7656      
  13.7109      

julia> for i = 1:ngrd
              post[i] = exp( logpost(ν, ρ, σgrd[i], sk, grd, thin) )
          end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11e359bd0>

julia> plot(σgrd, post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11f63b090>

julia> thin
10

julia> thin = 1
1

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
    0.0         
    0.0         
  640.0         
  567.0         
    0.04        
    0.04        
    0.00444444  
    0.00444444  
 4096.0         
 4096.0         
    0.000244141 
    0.000244141 
    0.5         
    0.0         
    3.23791e-319
    0.0         
    6.94305e-310
    0.0         
    0.0         
    6.94305e-310
    0.0         
    0.0078125   
    ⋮           
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         
    0.0         

julia> for i = 1:ngrd
              post[i] = exp( logpost(ν, ρ, σgrd[i], sk, grd, thin) )
          end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11f673650>

julia> post
500-element Array{Float64,1}:
   0.0
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
   ⋮  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  
 Inf  

julia> thin = 5
5

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
   0.0         
   8.32399e-200
   2.29633e-314
   2.3234e-314 
   0.0         
   0.0         
   0.0         
   0.0         
   0.0         
   0.0         
  -2.55134e166 
   2.2949e-314 
   2.37244e-314
   0.0         
   0.0         
   0.0         
   7.03908e-199
   2.29821e-314
   2.28853e-314
   0.0         
   0.0         
   0.0         
   ⋮           
   0.0         
 NaN           
   6.94296e-310
 NaN           
   0.0         
   6.94304e-310
   6.94304e-310
   6.94304e-310
   6.94304e-310
 NaN           
   6.94296e-310
 NaN           
   0.0         
 NaN           
   6.94296e-310
 NaN           
   0.0         
   6.94304e-310
   6.94304e-310
   6.94304e-310
   6.94304e-310

julia> for i = 1:ngrd
              post[i] = exp( logpost(ν, ρ, σgrd[i], sk, grd, thin) )
          end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11f64c2d0>

julia> post
500-element Array{Float64,1}:
   0.0        
   1.46021e305
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
   ⋮          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          
 Inf          

julia> thin = 10
10

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
 1.66195e-314
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 6.85988e19  
 0.0         
 0.0         
 8.20564e-24 
 0.0         
 0.0         
 0.0         
 0.0         
 6.94304e-310
 6.94304e-310
 0.0         
 6.94305e-310
 6.94305e-310
 0.0         
 0.0         
 0.0078125   
 ⋮           
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         
 0.0         

julia> for i = 1:ngrd
              post[i] = exp( logpost(ν, ρ, σgrd[i], sk, grd, thin) )
          end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11e37e590>

julia> thin = 5
5

julia> ngrd = 500
500

julia> σgrd = linspace(0.001, 20, ngrd)
500-element Array{Float64,1}:
  0.001    
  0.0410782
  0.0811563
  0.121234 
  0.161313 
  0.201391 
  0.241469 
  0.281547 
  0.321625 
  0.361703 
  0.401782 
  0.44186  
  0.481938 
  0.522016 
  0.562094 
  0.602172 
  0.642251 
  0.682329 
  0.722407 
  0.762485 
  0.802563 
  0.842641 
  ⋮        
 19.1984   
 19.2385   
 19.2786   
 19.3187   
 19.3587   
 19.3988   
 19.4389   
 19.479    
 19.5191   
 19.5591   
 19.5992   
 19.6393   
 19.6794   
 19.7195   
 19.7595   
 19.7996   
 19.8397   
 19.8798   
 19.9198   
 19.9599   
 20.0      

julia> post = Array(Float64, ngrd)
500-element Array{Float64,1}:
  0.0         
  8.32399e-200
  2.29633e-314
  2.3256e-314 
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
 -2.55134e166 
  2.2949e-314 
  2.32336e-314
  0.0         
  0.0         
  0.0         
  7.03908e-199
  2.29821e-314
  2.28853e-314
  0.0         
  0.0         
  0.0         
  ⋮           
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
  0.0         
  4.13958e-98 
  2.2889e-314 
  2.29003e-314
  0.0         
  0.0         
  0.0         
 -2.17272e134 
  2.29312e-314
  6.94305e-310
  0.0         
  0.0         
  0.0         
  2.54694e166 

julia> for i = 1:ngrd
              post[i] = exp( logpost(ν, ρ, σgrd[i], sk, grd, thin) )
          end

julia> plot(post)
1-element Array{Any,1}:
 PyObject <matplotlib.lines.Line2D object at 0x11f65a490>

julia> thin = 50


